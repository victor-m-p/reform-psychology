-- running explore_priors.R --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- REPLICATION_FOS --
-- running main_model.R (replication_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 1240 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, DocType, NormalizedNameSub, PaperTitle
dbl (7): match_group, FamilyId, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
-- running prior_sensitivity.R (replication_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 1240 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, DocType, NormalizedNameSub, PaperTitle
dbl (7): match_group, FamilyId, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
-- running likelihood_comparison.R (replication_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 1240 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, DocType, NormalizedNameSub, PaperTitle
dbl (7): match_group, FamilyId, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
           beta(1, 1)    zi                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
           beta(1, 1)    zi                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                            default
# A tibble: 1 × 1
   mean
  <dbl>
1  13.9
 Family: negbinomial 
  Links: mu = log; shape = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 1240) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 620) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           0.82      0.10     0.64
sd(condition_fctcontrol)                              0.68      0.13     0.43
cor(condition_fctexperiment,condition_fctcontrol)     0.15      0.19    -0.21
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           1.02 1.00      954
sd(condition_fctcontrol)                              0.94 1.00      626
cor(condition_fctexperiment,condition_fctcontrol)     0.52 1.00     1173
                                                  Tail_ESS
sd(condition_fctexperiment)                           2010
sd(condition_fctcontrol)                              1119
cor(condition_fctexperiment,condition_fctcontrol)     1877

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     1.73      0.18     1.39     2.09
condition_fctcontrol                        1.76      0.19     1.37     2.12
condition_fctexperiment:log_teamsize        0.30      0.10     0.11     0.49
condition_fctcontrol:log_teamsize           0.81      0.11     0.59     1.03
condition_fctexperiment:year_after_2005     0.07      0.02     0.02     0.11
condition_fctcontrol:year_after_2005       -0.07      0.02    -0.11    -0.02
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00     2040     3100
condition_fctcontrol                    1.00     1666     2179
condition_fctexperiment:log_teamsize    1.00     2347     3079
condition_fctcontrol:log_teamsize       1.00     3121     3263
condition_fctexperiment:year_after_2005 1.00     3603     3072
condition_fctcontrol:year_after_2005    1.00     4142     3232

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     0.57      0.05     0.49     0.67 1.00      726     1317

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
 Family: zero_inflated_poisson 
  Links: mu = log; zi = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 1240) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 620) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           1.39      0.06     1.29
sd(condition_fctcontrol)                              1.38      0.07     1.25
cor(condition_fctexperiment,condition_fctcontrol)     0.04      0.06    -0.08
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           1.50 1.01      321
sd(condition_fctcontrol)                              1.54 1.00      369
cor(condition_fctexperiment,condition_fctcontrol)     0.16 1.00      207
                                                  Tail_ESS
sd(condition_fctexperiment)                            756
sd(condition_fctcontrol)                               786
cor(condition_fctexperiment,condition_fctcontrol)      426

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     1.34      0.17     1.01     1.68
condition_fctcontrol                        1.30      0.19     0.93     1.68
condition_fctexperiment:log_teamsize        0.35      0.10     0.17     0.54
condition_fctcontrol:log_teamsize           0.87      0.11     0.66     1.10
condition_fctexperiment:year_after_2005     0.04      0.02     0.00     0.08
condition_fctcontrol:year_after_2005       -0.07      0.02    -0.12    -0.03
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00      298      612
condition_fctcontrol                    1.01      338      668
condition_fctexperiment:log_teamsize    1.00      268      555
condition_fctcontrol:log_teamsize       1.00      405      756
condition_fctexperiment:year_after_2005 1.01      224      449
condition_fctcontrol:year_after_2005    1.00      272      740

Family Specific Parameters: 
   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
zi     0.13      0.02     0.09     0.16 1.00      699      927

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
 Family: zero_inflated_negbinomial 
  Links: mu = log; shape = identity; zi = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 1240) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 620) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           0.99      0.12     0.76
sd(condition_fctcontrol)                              0.88      0.16     0.58
cor(condition_fctexperiment,condition_fctcontrol)     0.10      0.14    -0.18
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           1.24 1.03       80
sd(condition_fctcontrol)                              1.22 1.05       72
cor(condition_fctexperiment,condition_fctcontrol)     0.40 1.01      695
                                                  Tail_ESS
sd(condition_fctexperiment)                            131
sd(condition_fctcontrol)                                86
cor(condition_fctexperiment,condition_fctcontrol)      832

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     1.69      0.18     1.32     2.04
condition_fctcontrol                        1.68      0.21     1.26     2.07
condition_fctexperiment:log_teamsize        0.32      0.10     0.13     0.51
condition_fctcontrol:log_teamsize           0.86      0.11     0.64     1.08
condition_fctexperiment:year_after_2005     0.06      0.02     0.01     0.10
condition_fctcontrol:year_after_2005       -0.07      0.02    -0.11    -0.02
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.01      384     1278
condition_fctcontrol                    1.02      208      509
condition_fctexperiment:log_teamsize    1.01      874     2506
condition_fctcontrol:log_teamsize       1.00     1146     2230
condition_fctexperiment:year_after_2005 1.00      787     1445
condition_fctcontrol:year_after_2005    1.00     2760     2791

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     1.03      0.38     0.62     2.13 1.05       67       72
zi        0.09      0.03     0.03     0.14 1.01      167      680

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
-- running updating_checks.R (replication_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- running pp_checks.R (replication_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 1240 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, DocType, NormalizedNameSub, PaperTitle
dbl (7): match_group, FamilyId, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning messages:
1: Removed 19420 rows containing non-finite values (stat_density). 
2: Removed 69 rows containing non-finite values (stat_density). 
3: Removed 418 rows containing non-finite values (stat_bin). 
4: Removed 6 rows containing missing values (geom_bar). 
5: Removed 3991 rows containing non-finite values (stat_density). 
6: Removed 69 rows containing non-finite values (stat_density). 
Warning messages:
1: Removed 3991 rows containing non-finite values (stat_density). 
2: Removed 69 rows containing non-finite values (stat_density). 
Warning messages:
1: Removed 3991 rows containing non-finite values (stat_density). 
2: Removed 69 rows containing non-finite values (stat_density). 
-- running hyp_testing.R (replication_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- running simulate_predict.R (replication_fos) -- 
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 1240 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, DocType, NormalizedNameSub, PaperTitle
dbl (7): match_group, FamilyId, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`summarise()` has grouped output by 'condition_fct'. You can override using the `.groups` argument.
Warning messages:
1: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
2: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
3: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select


Attaching package: ‘scales’

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

`summarise()` has grouped output by 'condition_fct'. You can override using the `.groups` argument.
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Transformation introduced infinite values in continuous x-axis 
3: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
4: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
5: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
-- REPRODUCIBILITY_FOS --
-- running main_model.R (reproducibility_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 456 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, NormalizedNameSub, DocType, PaperTitle
dbl (7): match_group, n_authors, FamilyId, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
-- running prior_sensitivity.R (reproducibility_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 456 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, NormalizedNameSub, DocType, PaperTitle
dbl (7): match_group, n_authors, FamilyId, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
-- running likelihood_comparison.R (reproducibility_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 456 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, NormalizedNameSub, DocType, PaperTitle
dbl (7): match_group, n_authors, FamilyId, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
           beta(1, 1)    zi                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
           beta(1, 1)    zi                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                            default
# A tibble: 1 × 1
   mean
  <dbl>
1  13.0
 Family: negbinomial 
  Links: mu = log; shape = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 456) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 228) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           0.34      0.14     0.05
sd(condition_fctcontrol)                              0.30      0.18     0.02
cor(condition_fctexperiment,condition_fctcontrol)     0.08      0.29    -0.48
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           0.59 1.00      827
sd(condition_fctcontrol)                              0.68 1.00      525
cor(condition_fctexperiment,condition_fctcontrol)     0.62 1.00     1661
                                                  Tail_ESS
sd(condition_fctexperiment)                            831
sd(condition_fctcontrol)                              1168
cor(condition_fctexperiment,condition_fctcontrol)     2140

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     2.50      0.25     2.00     2.98
condition_fctcontrol                        2.14      0.24     1.66     2.61
condition_fctexperiment:log_teamsize        0.33      0.12     0.10     0.58
condition_fctcontrol:log_teamsize           0.61      0.13     0.37     0.87
condition_fctexperiment:year_after_2005    -0.05      0.03    -0.10     0.00
condition_fctcontrol:year_after_2005       -0.08      0.03    -0.13    -0.02
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00     1846     1859
condition_fctcontrol                    1.00     1529     1497
condition_fctexperiment:log_teamsize    1.00     2292     2307
condition_fctcontrol:log_teamsize       1.00     2456     2585
condition_fctexperiment:year_after_2005 1.00     3663     2498
condition_fctcontrol:year_after_2005    1.00     3263     2780

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     0.78      0.07     0.65     0.94 1.00      933     1172

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
 Family: zero_inflated_poisson 
  Links: mu = log; zi = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 456) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 228) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           0.95      0.06     0.84
sd(condition_fctcontrol)                              1.10      0.08     0.97
cor(condition_fctexperiment,condition_fctcontrol)     0.13      0.09    -0.05
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           1.08 1.01      409
sd(condition_fctcontrol)                              1.27 1.00      492
cor(condition_fctexperiment,condition_fctcontrol)     0.29 1.00      256
                                                  Tail_ESS
sd(condition_fctexperiment)                           1111
sd(condition_fctcontrol)                              1085
cor(condition_fctexperiment,condition_fctcontrol)      621

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     2.17      0.21     1.74     2.58
condition_fctcontrol                        1.71      0.25     1.22     2.19
condition_fctexperiment:log_teamsize        0.36      0.11     0.14     0.59
condition_fctcontrol:log_teamsize           0.60      0.14     0.34     0.86
condition_fctexperiment:year_after_2005    -0.05      0.02    -0.09    -0.01
condition_fctcontrol:year_after_2005       -0.06      0.03    -0.11    -0.00
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00      400      867
condition_fctcontrol                    1.00      450      888
condition_fctexperiment:log_teamsize    1.01      334      741
condition_fctcontrol:log_teamsize       1.01      382      876
condition_fctexperiment:year_after_2005 1.01      374      883
condition_fctcontrol:year_after_2005    1.00      411      881

Family Specific Parameters: 
   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
zi     0.11      0.02     0.08     0.15 1.00     3197     3038

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
 Family: zero_inflated_negbinomial 
  Links: mu = log; shape = identity; zi = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 456) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 228) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           0.61      0.15     0.33
sd(condition_fctcontrol)                              0.74      0.19     0.36
cor(condition_fctexperiment,condition_fctcontrol)     0.18      0.19    -0.20
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           0.90 1.01      123
sd(condition_fctcontrol)                              1.08 1.00      122
cor(condition_fctexperiment,condition_fctcontrol)     0.54 1.00      888
                                                  Tail_ESS
sd(condition_fctexperiment)                            227
sd(condition_fctcontrol)                               246
cor(condition_fctexperiment,condition_fctcontrol)     1377

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     2.40      0.24     1.94     2.87
condition_fctcontrol                        1.97      0.27     1.42     2.50
condition_fctexperiment:log_teamsize        0.37      0.12     0.14     0.59
condition_fctcontrol:log_teamsize           0.62      0.13     0.36     0.88
condition_fctexperiment:year_after_2005    -0.05      0.02    -0.10    -0.01
condition_fctcontrol:year_after_2005       -0.06      0.03    -0.12    -0.01
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00      704     1993
condition_fctcontrol                    1.00      456     1462
condition_fctexperiment:log_teamsize    1.00     2877     3116
condition_fctcontrol:log_teamsize       1.00     2498     2821
condition_fctexperiment:year_after_2005 1.00     3221     3038
condition_fctcontrol:year_after_2005    1.00     2597     3025

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     2.18      1.29     1.08     6.09 1.00      108      181
zi        0.10      0.02     0.06     0.14 1.00     1227     2051

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
-- running updating_checks.R (reproducibility_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- running pp_checks.R (reproducibility_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 456 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, NormalizedNameSub, DocType, PaperTitle
dbl (7): match_group, n_authors, FamilyId, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning messages:
1: Removed 6611 rows containing non-finite values (stat_density). 
2: Removed 33 rows containing non-finite values (stat_density). 
3: Removed 170 rows containing non-finite values (stat_bin). 
4: Removed 6 rows containing missing values (geom_bar). 
5: Removed 1777 rows containing non-finite values (stat_density). 
6: Removed 33 rows containing non-finite values (stat_density). 
Warning messages:
1: Removed 1777 rows containing non-finite values (stat_density). 
2: Removed 33 rows containing non-finite values (stat_density). 
Warning messages:
1: Removed 1777 rows containing non-finite values (stat_density). 
2: Removed 33 rows containing non-finite values (stat_density). 
-- running hyp_testing.R (reproducibility_fos) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- running simulate_predict.R (reproducibility_fos) -- 
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 456 Columns: 11
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (4): condition, NormalizedNameSub, DocType, PaperTitle
dbl (7): match_group, n_authors, FamilyId, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`summarise()` has grouped output by 'condition_fct'. You can override using the `.groups` argument.
Warning messages:
1: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
2: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
3: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select


Attaching package: ‘scales’

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

`summarise()` has grouped output by 'condition_fct'. You can override using the `.groups` argument.
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Transformation introduced infinite values in continuous x-axis 
3: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
4: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
5: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
-- REPLICATION_KEYWORD --
-- running main_model.R (replication_keyword) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 2392 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): condition, DocType, PaperTitle
dbl (6): match_group, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
-- running prior_sensitivity.R (replication_keyword) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 2392 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): condition, DocType, PaperTitle
dbl (6): match_group, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac055532b732.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 151.1 seconds.
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 194.2 seconds.

Both chains finished successfully.
Mean chain execution time: 172.6 seconds.
Total execution time: 194.4 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0523a598f9.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 163.8 seconds.
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 201.3 seconds.

Both chains finished successfully.
Mean chain execution time: 182.6 seconds.
Total execution time: 201.4 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac057de84e69.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 138.0 seconds.
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 190.3 seconds.

Both chains finished successfully.
Mean chain execution time: 164.2 seconds.
Total execution time: 190.5 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac055786544f.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 168.3 seconds.
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 186.2 seconds.

Both chains finished successfully.
Mean chain execution time: 177.2 seconds.
Total execution time: 186.3 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0555ff55bb.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 129.3 seconds.
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 222.9 seconds.

Both chains finished successfully.
Mean chain execution time: 176.1 seconds.
Total execution time: 223.1 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05687478bc.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 128.8 seconds.
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 254.9 seconds.

Both chains finished successfully.
Mean chain execution time: 191.8 seconds.
Total execution time: 255.0 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0549b60c5a.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 164.9 seconds.
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 227.4 seconds.

Both chains finished successfully.
Mean chain execution time: 196.1 seconds.
Total execution time: 227.6 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac057117f383.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 167.7 seconds.
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 191.9 seconds.

Both chains finished successfully.
Mean chain execution time: 179.8 seconds.
Total execution time: 192.1 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac052e29b14f.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 142.0 seconds.
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 213.0 seconds.

Both chains finished successfully.
Mean chain execution time: 177.5 seconds.
Total execution time: 213.1 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05537495e8.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 135.5 seconds.
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 183.4 seconds.

Both chains finished successfully.
Mean chain execution time: 159.5 seconds.
Total execution time: 183.6 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac053c70d8a1.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 179.2 seconds.
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 193.8 seconds.

Both chains finished successfully.
Mean chain execution time: 186.5 seconds.
Total execution time: 194.0 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac05699ade37.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 140.4 seconds.
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 225.2 seconds.

Both chains finished successfully.
Mean chain execution time: 182.8 seconds.
Total execution time: 225.4 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac0541210b51.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 167.5 seconds.
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 228.4 seconds.

Both chains finished successfully.
Mean chain execution time: 197.9 seconds.
Total execution time: 228.6 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac056c7b6aa2.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 175.3 seconds.
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 229.0 seconds.

Both chains finished successfully.
Mean chain execution time: 202.1 seconds.
Total execution time: 229.1 seconds.

Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmpXb76A3/model-ac053effc804.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 173.2 seconds.
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 234.3 seconds.

Both chains finished successfully.
Mean chain execution time: 203.7 seconds.
Total execution time: 234.5 seconds.

There were 30 warnings (use warnings() to see them)
-- running likelihood_comparison.R (replication_keyword) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 2392 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): condition, DocType, PaperTitle
dbl (6): match_group, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
           beta(1, 1)    zi                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                prior class                                    coef    group
               (flat)     b                                                 
               (flat)     b                    condition_fctcontrol         
               (flat)     b       condition_fctcontrol:log_teamsize         
               (flat)     b    condition_fctcontrol:year_after_2005         
               (flat)     b                 condition_fctexperiment         
               (flat)     b    condition_fctexperiment:log_teamsize         
               (flat)     b condition_fctexperiment:year_after_2005         
               lkj(1)   cor                                                 
               lkj(1)   cor                                         id_match
 student_t(3, 0, 2.5)    sd                                                 
 student_t(3, 0, 2.5)    sd                                         id_match
 student_t(3, 0, 2.5)    sd                    condition_fctcontrol id_match
 student_t(3, 0, 2.5)    sd                 condition_fctexperiment id_match
    gamma(0.01, 0.01) shape                                                 
           beta(1, 1)    zi                                                 
 resp dpar nlpar bound       source
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                       (vectorized)
                            default
                       (vectorized)
                       (vectorized)
                       (vectorized)
                            default
                            default
# A tibble: 1 × 1
   mean
  <dbl>
1  7.82
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b51669f22de6.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 29.7 seconds.
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 29.9 seconds.

Both chains finished successfully.
Mean chain execution time: 29.8 seconds.
Total execution time: 30.1 seconds.

Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 105, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 106, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 113, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 113, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 113, column 112: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 132, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 139, column 2: Declaration
    of arrays by placing brackets af
ter a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b516367f1ed8.stan', line 147, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 27.9 seconds.
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 28.4 seconds.

Both chains finished successfully.
Mean chain execution time: 28.2 seconds.
Total execution time: 28.7 seconds.

Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 113, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 114, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 121, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 121, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 121, column 124: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 140, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 147, column 2: Declaration
    of arrays by placing brackets af
ter a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5165e9e19ff.stan', line 155, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 44.3 seconds.
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 45.0 seconds.

Both chains finished successfully.
Mean chain execution time: 44.7 seconds.
Total execution time: 45.3 seconds.

Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 22, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 23, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 30, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 30, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 30, column 115: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 46, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 53, column 2: Declaration
    of arrays by placing brackets after a v
ariable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5167b7550e8.stan', line 61, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 234.9 seconds.
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 294.1 seconds.

Both chains finished successfully.
Mean chain execution time: 264.5 seconds.
Total execution time: 294.3 seconds.

Warning messages:
1: Found 181 observations with a pareto_k > 0.7 in model 'm'. It is recommended to set 'moment_match = TRUE' in order to perform moment matching for problematic observations.  
2: 
153 (6.4%) p_waic estimates greater than 0.4. We recommend trying loo instead. 
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 105, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 106, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 113, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 113, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 113, column 112: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 132, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 139, column 2: Declaration
    of arrays by placing brackets af
ter a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b5163c06af37.stan', line 147, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 801.9 seconds.
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 863.2 seconds.

Both chains finished successfully.
Mean chain execution time: 832.6 seconds.
Total execution time: 863.4 seconds.

Warning messages:
1: Found 1678 observations with a pareto_k > 0.7 in model 'm'. It is recommended to set 'moment_match = TRUE' in order to perform moment matching for problematic observations.  
2: 
1802 (75.3%) p_waic estimates greater than 0.4. We recommend trying loo instead. 
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 113, column 2: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 114, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 121, column 28: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 121, column 64: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 121, column 124: Declaration
    of arrays by placing brackets after a type is deprecated and will be
    removed in Stan 2.32.0. Instead use the array keyword before the type.
    This can be changed automatically using the auto-format flag to stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 140, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 147, column 2: Declaration
    of arrays by placing brackets af
ter a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/RtmplzxQOz/model-b51628b191b4.stan', line 155, column 2: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc

Start sampling
Running MCMC with 2 chains, at most 4 in parallel, with 2 thread(s) per chain...

Chain 1 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 4000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 2 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 2 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 1 Iteration:  100 / 4000 [  2%]  (Warmup) 
Chain 2 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 1 Iteration:  200 / 4000 [  5%]  (Warmup) 
Chain 2 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 1 Iteration:  300 / 4000 [  7%]  (Warmup) 
Chain 2 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 1 Iteration:  400 / 4000 [ 10%]  (Warmup) 
Chain 2 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 2 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 1 Iteration:  500 / 4000 [ 12%]  (Warmup) 
Chain 2 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 2 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 1 Iteration:  600 / 4000 [ 15%]  (Warmup) 
Chain 2 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 1 Iteration:  700 / 4000 [ 17%]  (Warmup) 
Chain 1 Iteration:  800 / 4000 [ 20%]  (Warmup) 
Chain 2 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 2 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 1 Iteration:  900 / 4000 [ 22%]  (Warmup) 
Chain 2 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 1 Iteration: 1000 / 4000 [ 25%]  (Warmup) 
Chain 1 Iteration: 1100 / 4000 [ 27%]  (Warmup) 
Chain 2 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 1 Iteration: 1200 / 4000 [ 30%]  (Warmup) 
Chain 2 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 1 Iteration: 1300 / 4000 [ 32%]  (Warmup) 
Chain 2 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 1 Iteration: 1400 / 4000 [ 35%]  (Warmup) 
Chain 2 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1500 / 4000 [ 37%]  (Warmup) 
Chain 2 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 1600 / 4000 [ 40%]  (Warmup) 
Chain 2 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1700 / 4000 [ 42%]  (Warmup) 
Chain 2 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 1800 / 4000 [ 45%]  (Warmup) 
Chain 1 Iteration: 1900 / 4000 [ 47%]  (Warmup) 
Chain 2 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 2 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 2000 / 4000 [ 50%]  (Warmup) 
Chain 1 Iteration: 2001 / 4000 [ 50%]  (Sampling) 
Chain 2 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 2100 / 4000 [ 52%]  (Sampling) 
Chain 2 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 2200 / 4000 [ 55%]  (Sampling) 
Chain 1 Iteration: 2300 / 4000 [ 57%]  (Sampling) 
Chain 2 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 2400 / 4000 [ 60%]  (Sampling) 
Chain 2 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 2500 / 4000 [ 62%]  (Sampling) 
Chain 2 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2600 / 4000 [ 65%]  (Sampling) 
Chain 2 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 2700 / 4000 [ 67%]  (Sampling) 
Chain 2 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 2 finished in 356.3 seconds.
Chain 1 Iteration: 2800 / 4000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2900 / 4000 [ 72%]  (Sampling) 
Chain 1 Iteration: 3000 / 4000 [ 75%]  (Sampling) 
Chain 1 Iteration: 3100 / 4000 [ 77%]  (Sampling) 
Chain 1 Iteration: 3200 / 4000 [ 80%]  (Sampling) 
Chain 1 Iteration: 3300 / 4000 [ 82%]  (Sampling) 
Chain 1 Iteration: 3400 / 4000 [ 85%]  (Sampling) 
Chain 1 Iteration: 3500 / 4000 [ 87%]  (Sampling) 
Chain 1 Iteration: 3600 / 4000 [ 90%]  (Sampling) 
Chain 1 Iteration: 3700 / 4000 [ 92%]  (Sampling) 
Chain 1 Iteration: 3800 / 4000 [ 95%]  (Sampling) 
Chain 1 Iteration: 3900 / 4000 [ 97%]  (Sampling) 
Chain 1 Iteration: 4000 / 4000 [100%]  (Sampling) 
Chain 1 finished in 437.0 seconds.

Both chains finished successfully.
Mean chain execution time: 396.6 seconds.
Total execution time: 437.2 seconds.

Warning: 2 of 2 chains had an E-BFMI less than 0.2.
See https://mc-stan.org/misc/warnings for details.

Warning messages:
1: Found 813 observations with a pareto_k > 0.7 in model 'm'. It is recommended to set 'moment_match = TRUE' in order to perform moment matching for problematic observations.  
2: 
610 (25.5%) p_waic estimates greater than 0.4. We recommend trying loo instead. 
 Family: negbinomial 
  Links: mu = log; shape = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 2392) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 1196) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           0.78      0.05     0.68
sd(condition_fctcontrol)                              0.76      0.09     0.59
cor(condition_fctexperiment,condition_fctcontrol)     0.05      0.12    -0.19
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           0.89 1.00     1078
sd(condition_fctcontrol)                              0.93 1.00      663
cor(condition_fctexperiment,condition_fctcontrol)     0.28 1.00      861
                                                  Tail_ESS
sd(condition_fctexperiment)                           2009
sd(condition_fctcontrol)                              1114
cor(condition_fctexperiment,condition_fctcontrol)     1760

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     2.03      0.13     1.78     2.28
condition_fctcontrol                        1.58      0.13     1.32     1.84
condition_fctexperiment:log_teamsize        0.63      0.06     0.51     0.76
condition_fctcontrol:log_teamsize           0.75      0.07     0.61     0.90
condition_fctexperiment:year_after_2005    -0.02      0.01    -0.05     0.01
condition_fctcontrol:year_after_2005       -0.03      0.01    -0.06    -0.00
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00     3738     3399
condition_fctcontrol                    1.00     2692     3144
condition_fctexperiment:log_teamsize    1.00     4594     3568
condition_fctcontrol:log_teamsize       1.00     3983     2987
condition_fctexperiment:year_after_2005 1.00     5700     3736
condition_fctcontrol:year_after_2005    1.00     3653     3126

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     0.73      0.04     0.65     0.82 1.00      750     1288

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
 Family: zero_inflated_poisson 
  Links: mu = log; zi = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 2392) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 1196) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           1.23      0.03     1.16
sd(condition_fctcontrol)                              1.29      0.05     1.21
cor(condition_fctexperiment,condition_fctcontrol)     0.05      0.04    -0.03
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           1.30 1.00      166
sd(condition_fctcontrol)                              1.38 1.00      337
cor(condition_fctexperiment,condition_fctcontrol)     0.12 1.01      145
                                                  Tail_ESS
sd(condition_fctexperiment)                            388
sd(condition_fctcontrol)                               759
cor(condition_fctexperiment,condition_fctcontrol)      468

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     1.73      0.11     1.52     1.95
condition_fctcontrol                        1.25      0.13     0.99     1.49
condition_fctexperiment:log_teamsize        0.59      0.06     0.48     0.70
condition_fctcontrol:log_teamsize           0.80      0.07     0.66     0.94
condition_fctexperiment:year_after_2005    -0.02      0.01    -0.05     0.00
condition_fctcontrol:year_after_2005       -0.04      0.01    -0.07    -0.01
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.02      196      389
condition_fctcontrol                    1.01      163      397
condition_fctexperiment:log_teamsize    1.00      201      511
condition_fctcontrol:log_teamsize       1.02      152      406
condition_fctexperiment:year_after_2005 1.02      181      368
condition_fctcontrol:year_after_2005    1.03      144      550

Family Specific Parameters: 
   Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
zi     0.11      0.01     0.09     0.13 1.00      736     1504

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
 Family: zero_inflated_negbinomial 
  Links: mu = log; shape = identity; zi = identity 
Formula: c_5 ~ 0 + condition_fct + condition_fct:log_teamsize + condition_fct:year_after_2005 + (0 + condition_fct | id_match) 
   Data: d (Number of observations: 2392) 
  Draws: 2 chains, each with iter = 2000; warmup = 0; thin = 1;
         total post-warmup draws = 4000

Group-Level Effects: 
~id_match (Number of levels: 1196) 
                                                  Estimate Est.Error l-95% CI
sd(condition_fctexperiment)                           1.05      0.08     0.89
sd(condition_fctcontrol)                              1.10      0.09     0.90
cor(condition_fctexperiment,condition_fctcontrol)     0.06      0.06    -0.06
                                                  u-95% CI Rhat Bulk_ESS
sd(condition_fctexperiment)                           1.19 1.01       57
sd(condition_fctcontrol)                              1.27 1.01       55
cor(condition_fctexperiment,condition_fctcontrol)     0.17 1.00      647
                                                  Tail_ESS
sd(condition_fctexperiment)                            201
sd(condition_fctcontrol)                               141
cor(condition_fctexperiment,condition_fctcontrol)     1099

Population-Level Effects: 
                                        Estimate Est.Error l-95% CI u-95% CI
condition_fctexperiment                     1.91      0.13     1.67     2.16
condition_fctcontrol                        1.44      0.15     1.15     1.73
condition_fctexperiment:log_teamsize        0.59      0.06     0.48     0.71
condition_fctcontrol:log_teamsize           0.79      0.07     0.65     0.93
condition_fctexperiment:year_after_2005    -0.02      0.01    -0.05     0.00
condition_fctcontrol:year_after_2005       -0.04      0.01    -0.07    -0.01
                                        Rhat Bulk_ESS Tail_ESS
condition_fctexperiment                 1.00      178      854
condition_fctcontrol                    1.01      205      819
condition_fctexperiment:log_teamsize    1.00     1443     2328
condition_fctcontrol:log_teamsize       1.00     1307     2358
condition_fctexperiment:year_after_2005 1.01     1483     2266
condition_fctcontrol:year_after_2005    1.00     1418     2128

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
shape     2.83      1.30     1.36     6.27 1.03       47       96
zi        0.10      0.01     0.08     0.12 1.00      465     1158

Draws were sampled using sample(hmc). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
-- running updating_checks.R (replication_keyword) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- running pp_checks.R (replication_keyword) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 2392 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): condition, DocType, PaperTitle
dbl (6): match_group, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning messages:
1: Removed 32128 rows containing non-finite values (stat_density). 
2: Removed 160 rows containing non-finite values (stat_density). 
3: Removed 1181 rows containing non-finite values (stat_bin). 
4: Removed 6 rows containing missing values (geom_bar). 
5: Removed 10210 rows containing non-finite values (stat_density). 
6: Removed 160 rows containing non-finite values (stat_density). 
Warning messages:
1: Removed 10210 rows containing non-finite values (stat_density). 
2: Removed 160 rows containing non-finite values (stat_density). 
Warning messages:
1: Removed 10210 rows containing non-finite values (stat_density). 
2: Removed 160 rows containing non-finite values (stat_density). 
-- running hyp_testing.R (replication_keyword) --
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
-- running simulate_predict.R (replication_keyword) -- 
Loading required package: pacman
Loading required package: cmdstanr
This is cmdstanr version 0.5.0
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /home/ucloud/.cmdstan/cmdstan-2.29.2
- CmdStan version: 2.29.2
Rows: 2392 Columns: 9
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (3): condition, DocType, PaperTitle
dbl (6): match_group, n_authors, PaperId, Year, days_after_2005, c_5

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
`summarise()` has grouped output by 'condition_fct'. You can override using the `.groups` argument.
Warning messages:
1: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
2: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
3: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select


Attaching package: ‘scales’

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

`summarise()` has grouped output by 'condition_fct'. You can override using the `.groups` argument.
Warning messages:
1: Transformation introduced infinite values in continuous x-axis 
2: Transformation introduced infinite values in continuous x-axis 
3: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
4: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'
5: In is.na(x) :
  is.na() applied to non-(list or vector) of type 'expression'

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Reading package lists...
Building dependency tree...
Reading state information...
unzip is already the newest version (6.0-25ubuntu1).
zip is already the newest version (3.0-11build1).
The following packages were automatically installed and are no longer required:
  libarmadillo-dev libarpack2-dev libboost-dev libboost1.71-dev libcfitsio-dev
  libcharls-dev libdap-dev libdapserver7v5 libepsilon-dev libfreexl-dev
  libfyba-dev libgeotiff-dev libgif-dev libjson-c-dev libkml-dev
  libkmlconvenience1 libkmlregionator1 libkmlxsd1 libminizip-dev libogdi-dev
  libopenjp2-7-dev libpoppler-dev libpoppler-private-dev libqhull-dev
  libqhull-r7 libspatialite-dev libsuperlu-dev liburiparser-dev libwebp-dev
  libwebpdemux2 libxerces-c-dev libzstd-dev
Use 'sudo apt autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 13 not upgraded.
updating: modeling/ (stored 0%)
updating: modeling/replication_fos/ (stored 0%)
updating: modeling/replication_fos/pp_checks/ (stored 0%)
updating: modeling/replication_fos/pp_checks/pp_ungrouped.pdf (deflated 18%)
updating: modeling/replication_fos/pp_checks/pp_grouped.pdf (deflated 14%)
updating: modeling/replication_fos/fit_main_model/ (stored 0%)
updating: modeling/replication_fos/explore_priors/ (stored 0%)
updating: modeling/replication_fos/explore_priors/phi.pdf (deflated 3%)
updating: modeling/replication_fos/updating_checks/ (stored 0%)
updating: modeling/replication_fos/updating_checks/updating_family_group.pdf (deflated 7%)
updating: modeling/replication_fos/updating_checks/updating_b.pdf (deflated 7%)
updating: modeling/replication_fos/hyp_testing/ (stored 0%)
updating: modeling/replication_fos/hyp_testing/hyp.pdf (deflated 10%)
updating: modeling/replication_fos/hyp_testing/hyp.csv (deflated 47%)
updating: modeling/replication_fos/hyp_testing/hyp_outcome.csv (deflated 46%)
updating: modeling/replication_fos/hyp_testing/hyp_outcome.pdf (deflated 10%)
updating: modeling/replication_fos/likelihood_comparison/ (stored 0%)
updating: modeling/replication_fos/likelihood_comparison/negbin_combo.pdf (deflated 6%)
updating: modeling/replication_fos/likelihood_comparison/diagnostics_zinegbin.csv (deflated 11%)
updating: modeling/replication_fos/likelihood_comparison/diagnostics_zip.csv (deflated 14%)
updating: modeling/replication_fos/likelihood_comparison/zip_combo.pdf (deflated 5%)
updating: modeling/replication_fos/likelihood_comparison/zinegbin_combo.pdf (deflated 6%)
updating: modeling/replication_fos/likelihood_comparison/diagnostics_negbin.csv (deflated 13%)
updating: modeling/replication_fos/simulate_predict/ (stored 0%)
updating: modeling/replication_fos/simulate_predict/model_simulation_power.pdf (deflated 7%)
updating: modeling/replication_fos/simulate_predict/d_summary.csv (deflated 50%)
updating: modeling/replication_fos/simulate_predict/model_simulation_log.pdf (deflated 7%)
updating: modeling/replication_fos/prior_sensitivity/ (stored 0%)
updating: modeling/replication_fos/prior_sensitivity/intercept.pdf (deflated 7%)
updating: modeling/replication_fos/prior_sensitivity/teamsize.pdf (deflated 8%)
updating: modeling/replication_fos/prior_sensitivity/year.pdf (deflated 8%)
updating: modeling/replication_keyword/ (stored 0%)
updating: modeling/replication_keyword/pp_checks/ (stored 0%)
updating: modeling/replication_keyword/pp_checks/pp_ungrouped.pdf (deflated 19%)
updating: modeling/replication_keyword/pp_checks/pp_grouped.pdf (deflated 15%)
updating: modeling/replication_keyword/fit_main_model/ (stored 0%)
updating: modeling/replication_keyword/updating_checks/ (stored 0%)
updating: modeling/replication_keyword/updating_checks/updating_family_group.pdf (deflated 7%)
updating: modeling/replication_keyword/updating_checks/updating_b.pdf (deflated 7%)
updating: modeling/replication_keyword/hyp_testing/ (stored 0%)
updating: modeling/replication_keyword/hyp_testing/hyp.pdf (deflated 10%)
updating: modeling/replication_keyword/hyp_testing/hyp.csv (deflated 47%)
updating: modeling/replication_keyword/hyp_testing/hyp_outcome.csv (deflated 46%)
updating: modeling/replication_keyword/hyp_testing/hyp_outcome.pdf (deflated 11%)
updating: modeling/replication_keyword/likelihood_comparison/ (stored 0%)
updating: modeling/replication_keyword/likelihood_comparison/negbin_combo.pdf (deflated 6%)
updating: modeling/replication_keyword/likelihood_comparison/diagnostics_zinegbin.csv (deflated 13%)
updating: modeling/replication_keyword/likelihood_comparison/diagnostics_zip.csv (deflated 14%)
updating: modeling/replication_keyword/likelihood_comparison/zip_combo.pdf (deflated 6%)
updating: modeling/replication_keyword/likelihood_comparison/zinegbin_combo.pdf (deflated 6%)
updating: modeling/replication_keyword/likelihood_comparison/diagnostics_negbin.csv (deflated 12%)
updating: modeling/replication_keyword/simulate_predict/ (stored 0%)
updating: modeling/replication_keyword/simulate_predict/model_simulation_power.pdf (deflated 6%)
updating: modeling/replication_keyword/simulate_predict/d_summary.csv (deflated 49%)
updating: modeling/replication_keyword/simulate_predict/model_simulation_log.pdf (deflated 6%)
updating: modeling/replication_keyword/prior_sensitivity/ (stored 0%)
updating: modeling/replication_keyword/prior_sensitivity/intercept.pdf (deflated 8%)
updating: modeling/replication_keyword/prior_sensitivity/teamsize.pdf (deflated 8%)
updating: modeling/replication_keyword/prior_sensitivity/year.pdf (deflated 8%)
updating: modeling/reproducibility_fos/ (stored 0%)
updating: modeling/reproducibility_fos/pp_checks/ (stored 0%)
updating: modeling/reproducibility_fos/pp_checks/pp_ungrouped.pdf (deflated 16%)
updating: modeling/reproducibility_fos/pp_checks/pp_grouped.pdf (deflated 13%)
updating: modeling/reproducibility_fos/fit_main_model/ (stored 0%)
updating: modeling/reproducibility_fos/updating_checks/ (stored 0%)
updating: modeling/reproducibility_fos/updating_checks/updating_family_group.pdf (deflated 7%)
updating: modeling/reproducibility_fos/updating_checks/updating_b.pdf (deflated 6%)
updating: modeling/reproducibility_fos/hyp_testing/ (stored 0%)
updating: modeling/reproducibility_fos/hyp_testing/hyp.pdf (deflated 9%)
updating: modeling/reproducibility_fos/hyp_testing/hyp.csv (deflated 46%)
updating: modeling/reproducibility_fos/hyp_testing/hyp_outcome.csv (deflated 46%)
updating: modeling/reproducibility_fos/hyp_testing/hyp_outcome.pdf (deflated 9%)
updating: modeling/reproducibility_fos/likelihood_comparison/ (stored 0%)
updating: modeling/reproducibility_fos/likelihood_comparison/negbin_combo.pdf (deflated 5%)
updating: modeling/reproducibility_fos/likelihood_comparison/diagnostics_zinegbin.csv (deflated 11%)
updating: modeling/reproducibility_fos/likelihood_comparison/diagnostics_zip.csv (deflated 11%)
updating: modeling/reproducibility_fos/likelihood_comparison/zip_combo.pdf (deflated 5%)
updating: modeling/reproducibility_fos/likelihood_comparison/zinegbin_combo.pdf (deflated 5%)
updating: modeling/reproducibility_fos/likelihood_comparison/diagnostics_negbin.csv (deflated 11%)
updating: modeling/reproducibility_fos/simulate_predict/ (stored 0%)
updating: modeling/reproducibility_fos/simulate_predict/model_simulation_power.pdf (deflated 8%)
updating: modeling/reproducibility_fos/simulate_predict/d_summary.csv (deflated 44%)
updating: modeling/reproducibility_fos/simulate_predict/model_simulation_log.pdf (deflated 8%)
updating: modeling/reproducibility_fos/prior_sensitivity/ (stored 0%)
updating: modeling/reproducibility_fos/prior_sensitivity/intercept.pdf (deflated 8%)
updating: modeling/reproducibility_fos/prior_sensitivity/teamsize.pdf (deflated 7%)
updating: modeling/reproducibility_fos/prior_sensitivity/year.pdf (deflated 8%)
